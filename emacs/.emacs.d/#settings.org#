
#+TITLE: Emacs Config
#+AUTHOR: Jacob Stokes
#+TOC: true
#+DATE: 

* Setup
** Configure package sources

Add Melpa 

#+BEGIN_SRC emacs-lisp

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )
(package-initialize)

#+END_SRC

** Use Package
#+BEGIN_SRC emacs-lisp




#+END_SRC
** Appearence
*** Set theme to dracula.
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
 (load-theme 'dracula t)
 #+END_SRC
*** Enable transient dark mode.
 #+BEGIN_SRC emacs-lisp

 (transient-mark-mode 1)

 #+END_SRC
*** Disable splash screen.

 #+BEGIN_SRC emacs-lisp


 (setq inhibit-splash-screen t)


 #+END_SRC
*** Turn off menu bar and tool bar.
  #+BEGIN_SRC emacs-lisp
 ;; (menu-bar-mode -1)
(tool-bar-mode -1) 
  #+END_SRC
*** Add in dashboard 
 #+BEGIN_SRC emacs-lisp
   (require 'dashboard)
   (dashboard-setup-startup-hook)

   #+END_SRC

* Writing 
** Dubcaps mode.
 #+BEGIN_SRC emacs-lisp

  (defun dcaps-to-scaps ()
    "Convert word in DOuble CApitals to Single Capitals."
    (interactive)
    (and (= ?w (char-syntax (char-before)))
	 (save-excursion
           (and (if (called-interactively-p)
                    (skip-syntax-backward "w")
                  (= -3 (skip-syntax-backward "w")))
		(let (case-fold-search)
                  (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
		(capitalize-word 1)))))

  (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)


  ;; Dubcaps mode

  (define-minor-mode dubcaps-mode
    "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
  Single Capitals as you type."
    :init-value nil
    :lighter (" DC")
    (if dubcaps-mode
	(add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
      (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))

  (add-hook 'org-mode-hook 'dubcaps-mode)
  (add-hook 'markdown-mode-hook 'dubcaps-mode)

  #+END_SRC

** Flyspell
 #+BEGIN_SRC emacs-lisp
 (use-package flyspell-correct
      :ensure t
  :after flyspell
   :bind (:map flyspell-mode-map ("C-'" . flyspell-correct-wrapper)))

 (use-package flyspell-correct-ivy
     :ensure t 
  :after flyspell-correct)

 ;; Hook to org mode
;; (add-hook 'org-mode-hook 'flyspell-mode)



 #+END_SRC

* Key Bindings
** General bindings - to sort
#+BEGIN_SRC emacs-lisp 

(global-set-key (kbd "<f5>") 'restart-emacs)
(global-set-key (kbd "<f6>") 'olivetti-mode)
(global-set-key (kbd "<f12>") 'open-file-fast)
(global-set-key (kbd "<M-f12>") 'package-install)

#+END_SRC

** Kill other buffer.

#+BEGIN_SRC emacs-lisp

(defun other-window-kill-buffer ()
  "Kill the buffer in the other window"
  (interactive)
  ;; Window selection is used because point goes to a different window
  ;; if more than 2 windows are present
  (let ((win-curr (selected-window))
	(win-other (next-window)))
    (select-window win-other)
    (kill-this-buffer)
    (select-window win-curr)))

(global-set-key (kbd "C-x K") 'other-window-kill-buffer)


#+END_SRC

** Kill all buffers matching string, no prompt
#+BEGIN_SRC emacs-lisp

(defun is-help-buffer (buffer)
  (let ((name (buffer-name buffer)))
    (and (= ?* (aref name 0))
	 (string-match "Help" name))))

(defun kill-help-buffers ()
  (interactive)
  (cl-loop for buffer being the buffers
	do (and (is-help-buffer buffer) (kill-buffer buffer))))

(global-set-key (kbd "C-x C-k h") 'kill-help-buffers)



#+END_SRC

** Delete shortcuts
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-;") 'delete-backward-char)

#+END_SRC


* Pandoc
** Pandoc-mode

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'pandoc-mode)


#+END_SRC

* Org-mode
** Required

#+BEGIN_SRC emacs-lisp

(eval-after-load "org"
  '(require 'ox-md nil t))

#+END_SRC

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'pandoc-mode)

(setq org-pandoc-options-for-latex-pdf '((pdf-engine . "pdflatex")))

#+END_SRC
* Registers

#+BEGIN_SRC emacs-lisp
(set-register ?s (cons 'file "~/.emacs.d/settings.org"))

#+END_SRC

* Shell
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "<f7>") 'shell)

#+END_SRC

* Environments

** Python

*** Elpy
#+BEGIN_SRC emacs-lisp

  (use-package elpy
    :ensure t
    :init (elpy-enable)
    :config (setq elpy-rpc-python-command "python3")
    )

#+END_SRC

* Testing
** Open-file-fast
#+BEGIN_SRC emacs-lisp

(defun open-file-fast ()
  "Prompt to open a file from bookmark `bookmark-bmenu-list'.
This command is similar to `bookmark-jump', but use `ido-mode' interface, and ignore cursor position in bookmark.

URL `http://ergoemacs.org/emacs/emacs_hotkey_open_file_fast.html'
Version 2019-02-26"
  (interactive)
  (require 'bookmark)
  (bookmark-maybe-load-default-file)
  (let (($this-bookmark
         (ido-completing-read "Open bookmark:" (mapcar (lambda ($x) (car $x)) bookmark-alist))))
    (find-file (bookmark-get-filename $this-bookmark))
    ;; (bookmark-jump $this-bookmark)
    ))

#+END_SRC

** Ivy, Counsel, Swiper
 #+BEGIN_SRC emacs-lisp
   (use-package counsel :ensure t
     :after ivy
     :bind (("M-x" . 'counsel-M-x)
	    ("C-x C-f" . 'counsel-find-file)
	    ("<f1> f" . 'counsel-describe-function)
	    ("<f1> v" . 'counsel-describe-variable)
	    ("<f1> o" . 'counsel-describe-symbol)
	    ("<f1> l" . 'counsel-find-library)
	    ("<f2> i" . 'counsel-info-lookup-symbol)
	    ("<f2> u" . 'counsel-unicode-char)
	    ("C-c g" . 'counsel-git)
	    ("C-c j" . 'counsel-git-grep)
	    ("C-c k" . 'counsel-ag)
	    ("C-S-o" . 'counsel-rhythmbox)
	    :map minibuffer-local-map ("C-r" . 'counsel-minibuffer-history)))

   (use-package ivy :ensure t
     :init (setq ivy-use-virtual-buffers t
		 enable-recursive-minibuffers t)
    :demand  :config (ivy-mode 1)
    :bind (("C-c C-r" . ivy-resume)))

   (use-package swiper :ensure t
     :after ivy
     :bind (("C-s" . swiper)
	    ("C-r" . swiper)))



 #+END_SRC

** Switch Window
 #+BEGIN_SRC emacs-lisp 
   (use-package switch-window
    :ensure t
    :bind (("C-x o" . switch-window)
	    ("C-x 1" . switch-window-then-maximize)
	    ("C-x 2" . switch-window-then-split-below)
	    ("C-x 3" . switch-window-then-split-right)
	    ("C-x 0" . switch-window-then-delete)
	    ("C-x 4 d" . switch-window-then-dired)
	    ("C-x 4 f" . switch-window-then-find-file)
	    ("C-x 4 m" . switch-window-then-compose-mail)
	    ("C-x 4 r" . switch-window-then-find-file-read-only)
	    ("C-x 4 C-f" . switch-window-then-find-file)
	    ("C-x 4 C-o" . switch-window-then-find-file-read-only)
	    ("C-x 4 C-f" . switch-window-then-find-file)
	    ("C-x 4 C-o" . switch-window-then-display-buffer)
	    ("C-x 4 0" . switch-window-then-kill-buffer)))
 #+END_SRC 



 #+BEGIN_SRC emacs-lisp

   (defvar org-blocks-hidden nil)

   (defun org-toggle-blocks
   ()
     (interactive)
     (if org-blocks-hidden
	 (org-show-block-all)
       (org-hide-block-all))
     (setq-local org-blocks-hidden (not org-blocks-hidden)))

   (add-hook 'org-mode-hook 'org-toggle-blocks)

   (define-key org-mode-map (kbd "C-c t") 'org-toggle-blocks)
 #+END_SRC


 #+BEGIN_SRC emacs-lisp

 (setq org-src-tab-acts-natively t)

 #+END_SRC

** Ivy-bibtex
#+BEGIN_SRC emacs-lisp



#+END_SRC


** Pdf-tools

#+BEGIN_SRC emacs-lisp

  (use-package pdf-tools
    :ensure t
    :config (pdf-tools-install))


#+END_SRC





** Org-agenda

#+BEGIN_SRC emacs-lisp


(setq org-agenda-files (apply 'append
			      (mapcar
			       (lambda (directory)
				 (directory-files-recursively
				  directory org-agenda-file-regexp))
			       '("~/work/"))))

(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

#+END_SRC


** Org-Super-Agenda
 #+BEGIN_SRC emacs-lisp

   (use-package org-super-agenda
     :ensure t
     :config
    (setq org-super-agenda-groups '(
			      (:name "Waiting"
				  :tag "shop"))))
 #+END_SRC


** Org-Journal

#+BEGIN_SRC emacs-lisp

  (use-package org-journal
    :ensure t
    :config
    (setq org-journal-dir "~/work/journal/"))

#+END_SRC



** Org-Elpy integration

#+BEGIN_SRC emacs-lisp



#+END_SRC

* Org-Ref
#+BEGIN_SRC emacs-lisp

;;  ;;(setq org-ref-completion-library 'org-ref-ivy-cite)
;;  (require 'org-ref)
;;
;;  (setq org-ref-completion-library 'org-ref-ivy-cite)
;;  (setq reftex-default-bibliography '("~/org-ref-test/bibs/bib1.bib"))
;;
;;  ;; see org-ref for use of these variables
;;  (setq org-ref-bibliography-notes "~/org-ref-test/notes/notes.org"
;;	org-ref-default-bibliography '("~/org-ref-test/bibs/bib1.bib")
;;	org-ref-pdf-directory "~/org-ref-test/pdfs/")



;;  (setq org-ref-insert-cite-key "C-c ]")
;;
;;  (defun harvard-cite (key page)
;;    (interactive (list (completing-read "Cite: " (orhc-bibtex-candidates))
;;	       (read-string "Page: "))))






#+END_SRC


** Reftex

#+BEGIN_SRC emacs-lisp
(setq bibtex-completion-bibliography
      '("~/org-ref-test/bibs/Testing2.bib"
        ))


(setq bibtex-completion-format-citation-functions
  '((org-mode      . bibtex-completion-format-citation-pandoc-citeproc)
    (latex-mode    . bibtex-completion-format-citation-cite)
    (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
    (default       . bibtex-completion-format-citation-default)))



(setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)

(global-set-key (kbd "C-c i") 'ivy-bibtex)

(setq bibtex-completion-pdf-field "File")


(defun bibtex-completion-open-pdf-of-entry-at-point ()
  (interactive)
  (save-excursion
    (bibtex-beginning-of-entry)
    (when (looking-at bibtex-entry-maybe-empty-head)
      (bibtex-completion-open-pdf (bibtex-key-in-head)))))


(defun my/print-reference-title ()
  "Print the title to the reference at point in the minibuffer."
  (interactive)
  (message
   (assoc-default "title"
                  (bibtex-completion-get-entry
                   (org-ref-get-bibtex-key-under-cursor)))))


#+END_SRC







